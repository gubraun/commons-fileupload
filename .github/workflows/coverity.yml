# This is a basic workflow to help you get started with Actions

name: Coverity

# Controls when the workflow will run
on: workflow_dispatch

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  analyze:
    name: Analyze
    # runs-on: self-hosted
    runs-on: ubuntu-latest
    env:
      # COVERITY_TOOL_HOME: /opt/cov-analysis-linux64-2021.06
      # For GitHub-hosted runners, use this path instead
      COVERITY_TOOL_HOME: ./cov-analysis
    steps:
      - uses: actions/checkout@v2
      
      # For GitHub-hosted runners
      - name: Cache Coverity Analysis
        id: coverity-cache
        uses: actions/cache@v2
        with:
          path: |
            cov-analysis/
          key: coverity-cache-ubuntu
          
      - name: Download Coverity
        if: steps.coverity-cache.outputs.cache-hit != 'true'
        run: |
          curl -k --user ${{ secrets.COVERITY_USER }}:${{ secrets.COVERITY_PASSPHRASE }} -o license.dat ${{ secrets.COVERITY_SERVER_URL }}/downloadFile.htm?fn=license.dat
          curl -k --user ${{ secrets.COVERITY_USER }}:${{ secrets.COVERITY_PASSPHRASE }} ${{ secrets.COVERITY_SERVER_URL }}/downloadFile.htm?fn=cov-analysis-linux64-2021.06.tar.gz | tar -xvfz -
          mv cov-analysis-linux64-2021.06 cov-analysis
          cp license.dat ./cov-analysis/bin
          
      - name: Configure Coverity
        run: $COVERITY_TOOL_HOME/bin/cov-configure --java
          
      # Common part of job
      - name: Coverity
        run: |
          $COVERITY_TOOL_HOME/bin/cov-build --dir idir mvn -Drat.skip=true -DskipTests=true clean package
          $COVERITY_TOOL_HOME/bin/cov-analyze --dir idir --ticker-mode none --all --disable-fb --webapp-security --enable-audit-mode --strip-path $PWD
          $COVERITY_TOOL_HOME/bin/cov-format-errors --dir idir --json-output-v7 coverity-results.json

      - name: Convert Coverity results to SARIF
        run: |
          $COVERITY_TOOL_HOME/node/bin/node $COVERITY_TOOL_HOME/SARIF/cov-format-sarif-for-github.js -i coverity-results.json -r gubraun/commons-fileupload -c gubraun/commons-fileupload `pwd` `git rev-parse HEAD` -o coverity-results.sarif
         
#      - name: Convert Coverity Results to SARIF
#        uses: gautambaghel/coverity-scan-results-to-sarif@1.0.0
#        with:
#          pipeline-results-json: coverity-results.json
#          output-results-sarif: coverity-results.sarif
                
      - name: Upload SARIF file to GitHub UI
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: coverity-results.sarif
